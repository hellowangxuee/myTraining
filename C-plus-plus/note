对C++的重新解读
=================
#####构造函数
#练习的代码
#include<iostream>
using namespace std;

class Base1{
public:
    Base1(int i){cout<<"Constructing Base1 "<<i<<endl;}
    ~Base1(){cout<<"Destructing Base1 "<<endl;}
};

class Base2{
public:
    Base2(int j){cout<<"Constructing Base2 "<<j<<endl;}
    ~Base2(){cout<<"Destructing Base2"<<endl;}
};

class Base3{
public:
    Base3(){cout<<"Constructing Base3* "<<endl;}
    ~Base3(){cout<<"Destructing Base3"<<endl;}
};

class Derived:public Base2,public Base1,public Base3{
public:
    Derived(int a,int b,int c,int d):Base1(a),member2(d),member1(c),Base2(b){}
private:
    Base1 member1;
    Base2 member2;
    Base3 member3;
};

int main(){
  Derived obj(1,2,3,4)  ;
  return 0;
}

#####引用和指针：
指针可以多次被赋值，引用只能在初始化时指定被引用的对象，引用本身的地址不可获得，被隐藏起来了。


#####继承于派生：

一、类型兼容规则：(是多态性的重要基础之一)
需要基类对象的任何地方，都可以使用共有派生类的对象来替代，替代之后，派生类对象可以作为基类对象来使用，但只能使用从基类继承的成员。
1、派生类的对象可以隐含转换成基类对象
2、派生类的对象可以初始化基类的引用
3、派生类的指针可以隐含转换为基类的指针

当函数的形参是基类的对象时，实参可以是派生类的对象。

二、构造函数：
构造派生类的对象时，就要对基类的成员对象和新增成员对象进行初始化。
如果对基类进行初始化时，需要调用基类的带形参的构造函数时，派生类就必须生命构造函数。
派生类构造函数执行次序：
	1、调用基类构造函数，调用顺序按照他们被继承时声明的顺序(从左到右)
	2、对派生类新增的成员对象初始化，调用顺序按照他们在类中声明的顺序
	3、执行派生类的构造函数体中的内容
	
#include<iostream>
using namespace std;

class Base1{
public:
    Base1(int i){cout<<"Constructing Base1 "<<i<<endl;}
    ~Base1(){cout<<"Destructing Base1 "<<endl;}
};

class Base2{
public:
    Base2(int j){cout<<"Constructing Base2 "<<j<<endl;}
    ~Base2(){cout<<"Destructing Base2"<<endl;}
};

class Base3{
public:
    Base3(){cout<<"Constructing Base3* "<<endl;}
    ~Base3(){cout<<"Destructing Base3"<<endl;}
};

class Derived:public Base2,public Base1,public Base3{
public:
    Derived(int a,int b,int c,int d):Base1(a),member2(d),member1(c),Base2(b){}
private:
    Base1 member1;
    Base2 member2;
    Base3 member3;
};

int main(){
  Derived obj(1,2,3,4)  ;
  return 0;
}

程序执行顺序：
1、按照继承顺序调用Base2，Base1，Base3的构造函数
2、对新增成员按照声明顺序进行初始化，member1,member2,member3
3、执行派生类的构造函数体中的内容

三、虚基类

构造一个类的对象的一般顺序：
1、如果该类有直接或间接的虚基类，先执行虚基类的构造函数
2、如果该类有其他基类，按照继承声明列表顺序执行他们的构造函数，但在构造过程中，不再执行虚基类的构造函数
3、按照在类定义中出现的顺序，对派生类中新增的成员对象进行初始化。对于类类型的成员对象，如果出现在构造函数初始化列表中，
则以其中指定的参数执行构造函数，如未出现，则执行默认构造函数；基本数据类型的成员对象出现在构造函数的初始化列表中，
则使用其中指定的值为其赋初值，否则什么也不做。
4、执行构造函数的函数体。
#include<iostream>
using namespace std;

class Base0{
public:
    Base0(int var):var0(var){}
    int var0;
    void fun0(){cout<<"Member of Base0"<<endl;}
};

class Base1:virtual public Base0{
public:
    Base1(int var):Base0(var){}
    int var1;
};

class Base2:virtual public Base0{
public:
    Base2(int var):Base0(var){}
    int var2;
};

class Derived:public Base1,public Base2{
public:
    Derived(int var):Base0(var),Base1(var),Base2(var){}
    int var;
    void fun(){cout<<"Member of Derived"<<endl;}
};

int main(){
    Derived d(1);
    d.var = 2;
    d.fun();
    return 0;
}



四、多态

重载多态、强制多态、包含多态、参数多态


重载：
#include<iostream>
using namespace std;

class Complex{
public:
    Complex(double r = 0.0, double i = 0.0) : real(r), imag(i){}
    friend Complex operator+(const Complex &c1, const Complex &c2);
    friend Complex operator-(const Complex &c1, const Complex &c2);
    friend ostream &operator<<(ostream &out, const Complex &c);
private:
    double real;
    double imag;
};

Complex operator+(const Complex &c1, const Complex &c2){
    return Complex(c1.real + c2.real, c1.imag + c2.imag);
}

Complex operator-(const Complex &c1, const Complex &c2){
    return Complex(c1.real - c2.real, c1.imag - c2.imag);
}

ostream & operator<<(ostream &out, const Complex &c){
    out<<"("<<c.real<<","<<c.imag<<")";
    return out;
}

int main(){
    Complex c1(5,4),c2(2,10),c3;
    cout<<"c1 = "<<c1<<endl;
    cout<<"c2 = "<<c2<<endl;
    c3 = c1 - c2;
    cout<<"c3 = c1 - c2 = "<<c3<<endl;
    c3 = c1 + c2;
    cout<<"c3 = c1 - c2 = "<<c3<<endl;
    return 0;
}


#####虚函数：必须是非静态的成员函数

虚函数的声明只能出现在类定义中的函数原型声明中，而不能在成员函数实现的时候

运行多态满足的条件：
1、类之间满足赋值兼容规则
2、要声明虚函数
3、要由成员函数来调用或者通过指针、引用来访问虚函数

#include<iostream>
using namespace std;
class Base1{
public:
    virtual void display() const;
};

void Base1::display() const{
    cout<<"Base1::display()"<<endl;
}

class Base2:public Base1{
public:
    void display() const;
};

void Base2::display() const{
    cout<<"Base2::display()"<<endl;
}

class Derived:public Base2{
public:
    void display() const;
};

void Derived::display() const{
    cout<<"Derived::display()"<<endl;
}

void fun(Base1* ptr){
    ptr->display();
}

int main(){
    Base1 base1;
    Base2 base2;
    Derived derived;
    fun(&base1);
    fun(&base2);
    fun(&derived);

    return 0;
}
运行结果：
Base1::display()
Base2::display()
Derived::display()

虚析构函数：如果有可能通过基类指针调用对象的析构函数（通过delete），就需要让基类的析构函数成为虚函数，否则会产生不确定的后果。

#include<iostream>
using namespace std;

class Base{
public:
    virtual ~Base();
};

Base::~Base(){
    cout<<"Base destructor"<<endl;
}

class Derived:public Base{
public:
    Derived();
    ~Derived();
private:
    int *p;
};

Derived::Derived(){
    p = new int(0);
}

Derived::~Derived(){
    cout<<"Derived destructor"<<endl;
    delete p;
}

void fun(Base* b){
    delete b;
}

int main(){
    Base *b = new Derived();
    fun(b);
    return 0;
}
运行结果：
Derived destructor
Base destructor

纯虚函数：
virtual 函数类型 函数名(参数表) = 0；

抽象类：带有纯虚函数的类是抽象类

#####函数模板定义：
template<模板参数>
类型名 函数名(参数表){
	函数体的定义
}

1、函数模板在编译时不会产生任何目标代码，只有由模板生成的实例会生成目标代码


#####类模板：
template<模板参数表>
class 类名{
	类成员声明
}

在类模板以外定义其成员函数
template<模板参数表>
类型名 类名<模板参数标识符列表>::函数名(参数表)

举例：
#include<iostream>
#include<cstdlib>
using namespace std;

struct Student{
    int id;
    float gpa;
};

template<class T>
class Store{
private:
    T item;
    bool haveValue;
public:
    Store();
    T & getElem();
    void putElem(const T& x);
};

template<class T>
Store<T>::Store():haveValue(false){}

template<class T>
T & Store<T>::getElem(){
    if(!haveValue){
        cout<<"No item present!"<<endl;
        exit(1);
    }
    return item;
}

template<class T>
void Store<T>::putElem(const T& x){

    haveValue = true;
    item  = x;
}
int main(){
    Store<int>s1, s2;
    s1.putElem(3);
    s2.putElem(-7);
    cout<<s1.getElem()<<" "<<s2.getElem()<<endl;

    Student g = {1000,23};
    Store<Student>s3;
    s3.putElem(g);
    cout<<"The student id is "<<s3.getElem().id<<endl;

    Store<double> d;
    cout<<"Retrieving object d...";
    cout<<d.getElem()<<endl;
    return 0;
}


运行结果：
3 -7
The student id is 1000
Retrieving object d...No item present!

数组类模板：
//Array.h
#ifndef ARRAY_H
#define ARRAY_H
#include<cassert>

template<class T>
class Array{
private:
    T* list;
    int size;
public:
    Array(int sz = 50);
    Array(const Array<T>&a);
    ~Array();
    Array<T>& operator=(const Array<T>& rhs);
    T & operator[](int i);
    const T& operator[](int i) const;
    operator T*();
    operator const T*() const;
    int getSize() const;
    void resize(int sz);
};

//构造函数
template<class T>
Array<T>::Array(int sz){
    assert(sz >= 0);
    size = sz;
    list = new T[size];
}

template<class T>
Array<T>::~Array(){
    delete [] list;
}

//复制构造函数
template<class T>
Array<T>::Array(const Array<T>& a){
    size = a.size;
    list = new T[size];
    for(int i=0;i<size; i++){
        list[i] = a.list[i];
    }
}

//重载“=”运算符，将对象rhs赋值给本对象，实现对象之间的整体赋值
template<class T>
Array<T>& Array<T>::operator=(const Array<T>& rhs){
    if(&rhs != this){
        if(size != rhs.size){
            delete [] list;
            size = rhs.size;
            list = new T[size];
        }
        for(int i=0; i<size; i++){
            list[i] = rhs.list[i];
        }
    }
    return * this;
}

//重载下标运算符，实现与普通数组一样通过下标访问元素，并且具有越界检查功能
template<class T>
T& Array<T>::operator[](int n){
    assert(n>=0 && n<size);
    return list[n];
}

template<class T>
const T& Array<T>::operator[](int n) const{
    assert(n>=0 && n<size);
    return list[n];
}

//重载指针转换运算符。将Array类的对象名转换类型的指针，指向当前对象中的私有数组，因而可以像普通数组首地址一样使用Array类的对象名
template<class T>
Array<T>::operator T*(){
    return list;
}

template<class T>
Array<T>::operator const T*()const{
    return list;
}

template<class T>
int Array<T>::getSize() const{
    return size;
}

template<class T>
void Array<T>::resize(int sz){
    assert(sz >= 0);
    if(sz == size){
        return ;
    }
    T* newList = new T[sz];
    int n = (sz < size)?sz:size;
    for(int i=0;i<n;i++){
        newList[i] = list[i];
    }
    delete [] list;
    list = newList;
    size = sz;
}
#endif //ARRAY_H
